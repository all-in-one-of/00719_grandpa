"""
Copyright (c) 2012 Shotgun Software, Inc
----------------------------------------------------

Hook that runs after the work file has been published.

"""
import getpass
import datetime
import time
import os
import tempfile
import sys

#shotgun path
sys.path.append('Z:/_CORE/PythonRepo')

from tank import Hook
import maya.cmds as cmds

import bait_pytools.Maya.utils as bmu


class MayaPostPublish(Hook):
    
    def execute(self, publish_path, publish_id, **kwargs):
        """
        This gets executed after a publish has completed.
        Insert any post processing you may want to do here.
        
        :param publish_path: full path to the published work file. 
        :param publish_id: shotgun publish id.
        """
        
        #query context
        tk=self.parent.tank
        
        maya_publish=tk.templates['maya_shot_publish']
        fields=maya_publish.get_fields(publish_path)
        
        #fields={'Shot': '002', 'name': 'sh002_dance', 'Step': 'Anim', 'version': 22, 'filetag': 'anim', 'Episode': '000_dummy'}
        if fields['Step']=='Anim':
            
            maya_review=tk.templates['maya_shot_review']
            filePath=maya_review.apply_fields(fields)
            
            [thumb,mov]=self.ExportPlayblast(filePath)
            self.create_sg_version(fields,filePath,thumb,mov)
        
            '''
            Missing: exporting alembic and publishing it into shotgun
            '''
        
        
        '''
        if fields['Step']=='Sim':
        
        export Alembic for everything but Grandpa, to avoid overwriting cache from animation.
        
        '''
        
        
        
    def create_sg_version(self,fields,filePath,thumbnail,mov):
        
        #generating variables
        sg_version_name='v'+str(fields['version']).zfill(3)
        message='Animation review. Generated by maya_post_publish hook.'
        
        startTime=cmds.playbackOptions(q=True,minTime=True)
        endTime=cmds.playbackOptions(q=True,maxTime=True)
        
        # create sg version        
        data = {
            "code": sg_version_name,
            "description": message,
            "project": self.parent.context.project,
            "entity": self.parent.context.entity,
            "sg_task": self.parent.context.task,
            "created_by": self.parent.context.user,
            "user": self.parent.context.user,
            "sg_path_to_movie": filePath,
            "sg_first_frame": int(startTime),
            "sg_last_frame": int(endTime),
            "frame_count": int((endTime - startTime) + 1),
            "frame_range": "%d-%d" % (startTime,endTime),
        }
        
        entity = self.parent.shotgun.create("Version", data)
        
        self.parent.shotgun.upload_thumbnail("Version", entity["id"], thumbnail)
        
        self.parent.shotgun.upload("Version",entity['id'],mov,field_name='sg_uploaded_movie')
        
    def ExportPlayblast(self,filePath):
        
        #getting cameras in scene
        cams=[]
        exclude=['front','side','top']
        for cam in cmds.ls(cameras=True):
            
            tn=cmds.listRelatives(cam,parent=True)[0]
            
            if tn not in exclude:
                cams.append(tn)
        
        cams.append('Cancel')
        
        #user input
        cam=cmds.confirmDialog( title='Export Anim',
                                   message='Select camera to preview from.',
                                   button=cams)
        
        #building HUD
        HUD=[]
        getTime=time.time()
        timestamp=str(datetime.datetime.fromtimestamp(getTime).strftime('%d-%m-%Y %H:%M:%S'))
        HUD.append({'label':timestamp,
                    'block':0,
                    'section':1})
        HUD.append({'label':'Bait Studio',
                    'block':0,
                    'section':2})
        username = str(getpass.getuser())
        HUD.append({'label':username,
                    'block':0,
                    'section':3})
        f=os.path.basename(filePath)
        HUD.append({'label':f,
                    'block':1,
                    'section':7})
        
        #exporting playblast movie
        mov=bmu.__exportPlayblast__(filePath,cam,HUD=HUD,width=960,height=540)
        
        #exporting playblast thumbs
        png_tmp_folder = tempfile.gettempdir()
        thumb=bmu.__exportPlayblast__(png_tmp_folder+'/shotgunthumb', cam, width=960, height=540, exportType='still', HUD=HUD)
        
        #return
        return [thumb,mov]